import pygad
import random
import numpy as np

# ======================== PROBLEM PARAMETERS ========================
N = 100  # Number of available items (days)
restart_cost = 1000  # Cost to restart the plant after it being shut down
prod_per_day = 1000  # Revenue from day of running (smallest possible time frame)

# List of electricity prices
prices = [random.uniform(30, 60) for _ in range(N)]


# ======================== FITNESS FUNCTION ========================
def fitness_func(ga_instance, solution, solution_idx):
    """
    The fitness function calculates the total revenue generated by running a plant at given times.
    """
    revenue = 0
    going = False  # Plant starts off

    for idx in range(N):
        if int(solution[idx]) == 1:  # Ensure binary values
            if not going:  # Restarting the plant
                revenue -= restart_cost
                going = True  # Mark as running
            revenue += prod_per_day  # Add revenue
            revenue -= prices[idx]   # Subtract electricity cost
        else:
            going = False  # Plant is off

    return revenue


# ======================== GA PARAMETERS ========================
num_generations = 1000
num_parents_mating = 4
sol_per_pop = 100
num_genes = N

# Initialize population with strictly binary values (0s and 1s)
initial_population = np.random.choice([0, 1], size=(sol_per_pop, num_genes))

ga_instance = pygad.GA(
    num_generations=num_generations,  # Number of generations the GA will evolve
    num_parents_mating=num_parents_mating,  # Number of parents selected for reproduction
    fitness_func=fitness_func,  # The function used to evaluate solutions
    sol_per_pop=sol_per_pop,  # Number of solutions in each generation
    num_genes=num_genes,  # Number of genes (equal to number of items)
    parent_selection_type="sss",  # Steady-State Selection for choosing parents
    keep_parents=2,  # Number of parents carried to the next generation
    crossover_type="single_point",  # Single-point crossover for genetic mixing
    mutation_type="swap",
    mutation_percent_genes=10,  # Mutate 10% of the genes in each offspring
    initial_population=initial_population  # Ensure population starts as binary
)

# ======================== RUN GA ========================
ga_instance.run()  # Start the genetic algorithm

# ======================== OUTPUT RESULTS ========================
solution, solution_fitness, solution_idx = ga_instance.best_solution()

print("Best solution:")
print("[", end="")
for idx in range(N):
    if round(solution[idx]) == 1:
        print("â–ˆ", end="")
    else:
        print(" ", end="")
print("]")
print(f"Best solution fitness: {solution_fitness}")
